<div class="section-header">
  <h1>Set Offset Well</h1>
</div>

<div class="divider divider-lg"></div>

<div class="form new-field-form" data-form="set_offset_well">
  <%= form_for(@job, remote: true, :as => :post, :url => set_offset_well_job_path) do |f| %>

    <div class="block">
      <p class='job-field-title inline-block'>Offset Well</p>

      <%= hidden_field_tag "offset_well_id", "", :required => true %>

      <div class="inline-block align-top">

        <select id="combobox">

          <option value="">Select one...</option>
          <% Well.all.each do |well| %>
            <% if well.id != @job.well.id %>
              <option value="<%= well.id %>"><%= well.name %></option>
            <% end %>
          <% end %>

        </select>

      </div>
    </div>

    <div class="divider divider-lg"></div>

    <div class="content actions">
      <%= f.submit "Save", class: "btn btn-primary pull-left",
                   "data-form" => "set_offset_well" %>
    </div>

  <% end %>
</div>

<script type="text/javascript">
  // autocomplete dropdown
  $.widget("custom.combobox", {
    _create: function () {
      this.wrapper = $("<span>")
          .addClass("custom-combobox")
          .insertAfter(this.element);

      this.element.hide();
      this._createAutocomplete();
      this._createShowAllButton();
    },

    _createAutocomplete: function () {
      var selected = this.element.children(":selected"),
          value = selected.val() ? selected.text() : "";

      this.input = $("<input>")
          .appendTo(this.wrapper)
          .val(value)
          .attr("title", "")
          .attr("placeholder", "Type offset well name...")
          .attr("style", "padding-right: 20px;")
          .addClass("job-field-value-editable custom-combobox-input")
          .autocomplete({
            delay: 0,
            minLength: 0,
            source: $.proxy(this, "_source"),
            focus: function () {
              // prevent value inserted on focus
              return false;
            },
            select: function (event, ui) {
              console.log(ui);
              $('#offset_well_id').val(ui.item.value);
              this.value = ui.item.label;
              return false;
            }
          })
          .tooltip({
            tooltipClass: "ui-state-highlight"
          });

      this._on(this.input, {
        autocompleteselect: function (event, ui) {
          ui.item.option.selected = true;
          this._trigger("select", event, {
            item: ui.item.option
          });
        },

        autocompletechange: "_removeIfInvalid"
      });
    },

    _createShowAllButton: function () {
      var input = this.input,
          wasOpen = false;

      $("<a>")
          .attr("tabIndex", -1)
          .attr("title", "Show All Items")
          .tooltip()
          .appendTo(this.wrapper)
          .button({
            icons: {
              primary: "ui-icon-triangle-1-s"
            },
            text: false
          })
          .removeClass("ui-corner-all")
          .addClass("single-custom-combobox-toggle ui-corner-right")
          .mousedown(function () {
            wasOpen = input.autocomplete("widget").is(":visible");
          })
          .click(function () {
            input.focus();

            // Close if already visible
            if (wasOpen) {
              return;
            }

            // Pass empty string as value to search for, displaying all results
            input.autocomplete("search", "");
          });
    },

    _source: function (request, response) {
      var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
      response(this.element.children("option").map(function () {
        var text = $(this).text();
        if (this.value && ( !request.term || matcher.test(text) ))
          return {
            label: text,
            value: this.value,
            option: this
          };
      }));
    },

    _removeIfInvalid: function (event, ui) {

      // Selected an item, nothing to do
      if (ui.item) {
        return;
      }

      // Search for a match (case-insensitive)
      var value = this.input.val(),
          valueLowerCase = value.toLowerCase(),
          valid = false;
      this.element.children("option").each(function () {
        if ($(this).text().toLowerCase() === valueLowerCase) {
          this.selected = valid = true;
          return false;
        }
      });

      // Found a match, nothing to do
      if (valid) {
        return;
      }

      // Remove invalid value
      this.input
          .val("")
          .attr("title", value + " didn't match any item")
          .tooltip("open");
      this.element.val("");
      this._delay(function () {
        this.input.tooltip("close").attr("title", "");
      }, 2500);
      this.input.autocomplete("instance").term = "";
    },

    _destroy: function () {
      this.wrapper.remove();
      this.element.show();
    }
  });

  $("#combobox").combobox();
  $("#toggle").click(function () {
    $("#combobox").toggle();
  });
</script>